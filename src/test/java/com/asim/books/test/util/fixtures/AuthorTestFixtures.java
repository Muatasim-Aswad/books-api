package com.asim.books.test.util.fixtures;

import com.asim.books.domain.author.model.dto.AuthorDto;
import com.asim.books.domain.author.model.entity.Author;

import java.time.ZonedDateTime;

public final class AuthorTestFixtures {
    // Multiple authors
    public static final String[] NAMES = {
            "Name One", "Name Two", "Three", "Four"
    };
    public static final Integer[] AGES = {30, 45, 45, 60};

    // Single author
    public static final String NAME = "Original Name";
    public static final Integer AGE = 56;

    //Valid Autogenerated Fields
    public static final Long ID = 1L;
    public static final Integer VERSION = 1;
    public static final Long CREATED_BY = 1L;
    public static final Long UPDATED_BY = 2L;
    public static final ZonedDateTime CREATED_AT = ZonedDateTime.now();
    public static final ZonedDateTime UPDATED_AT = ZonedDateTime.now().plusSeconds(5);

    // Common test data
    public static final String UPDATED_NAME = "Updated Name";
    public static final Integer UPDATED_AGE = 45;

    public static final Long NON_EXISTING_ID = 9999L;
    public static final String NON_EXISTING_NAME = "Non Existing Name";

    // Invalid data
    // Invalid id
    public static final String STRING_ID = "invalid-id";
    public static final Long NEGATIVE_ID = -5L;
    public static final Long ZERO_ID = 0L;

    // Invalid name
    public static final String NULL_NAME = null;
    public static final String EMPTY_NAME = "";
    public static final String BLANK_NAME = " ";
    public static final String TOO_SHORT_NAME = "A";
    public static final String TOO_LONG_NAME = "A".repeat(101);

    // Invalid age
    public static final Integer NULL_AGE = null;
    public static final Integer NEGATIVE_AGE = -5;
    public static final Integer TOO_HIGH_AGE = 151;


    // Factory methods
    public static AuthorDto createDto(String name, Integer age) {
        return AuthorDto.builder()
                .name(name)
                .age(age)
                .build();
    }

    public static Author createEntity(String name, Integer age, Long id) {
        return Author.builder()
                .name(name)
                .age(age)
                .id(id)
                .version(VERSION)
                .createdBy(CREATED_BY)
                .createdAt(CREATED_AT)
                .build();
    }

    public static AuthorDto getOneDto() {
        return createDto(NAME, AGE);
    }

    public static AuthorDto getOneDtoWithId() {
        AuthorDto authorDto = createDto(NAME, AGE);
        authorDto.setId(ID);
        return authorDto;
    }

    public static AuthorDto[] getManyDTOs() {
        int length = NAMES.length;
        AuthorDto[] authorDTOs = new AuthorDto[length];

        for (int i = 0; i < length; i++) {
            authorDTOs[i] = createDto(NAMES[i], AGES[i]);
        }

        return authorDTOs;
    }

    public static Author getOneEntity() {
        return createEntity(NAME, AGE, ID);
    }

    public static Author[] getManyEntities() {
        int length = NAMES.length;
        Author[] authors = new Author[length];

        for (int i = 0; i < length; i++) {
            authors[i] = createEntity(NAMES[i], AGES[i], (long) i + 1);
        }

        return authors;
    }
}